name: ML Model CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, release/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black==23.3.0 pylint==2.17.4
      
      - name: Format code with black
        run: |
          black src/
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add src/
          git commit -m "[auto] Format code with black" || echo "No changes to commit"
          git push || echo "No changes to push"
      
      - name: Run pylint
        run: |
          pylint src/ --fail-under=7 || echo "Pylint score below threshold"

  preprocessing:
    needs: linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Generate and preprocess dataset
        run: |
          mkdir -p data
          python src/data_generator.py
      
      - name: Upload dataset artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: data/dataset.csv
          retention-days: 1

  training:
    needs: preprocessing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download processed data
        uses: actions/download-artifact@v4
        with:
          name: processed-data
          path: data
      
      - name: Setup MLflow
        run: |
          mkdir -p mlruns
          mlflow server --host 0.0.0.0 --port 5000 &
          sleep 5
      
      - name: Train model
        run: |
          export MLFLOW_TRACKING_URI=http://localhost:5000
          python src/train_mlflow.py
      
      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: |
            models/
            mlruns/
          retention-days: 1

  testing:
    needs: training
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov
      
      - name: Download model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: .
      
      - name: Setup test environment
        run: |
          mkdir -p data
          mkdir -p models
          mkdir -p mlruns
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=src/ --cov-report=term-missing
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .coverage
            coverage.xml
          retention-days: 1

  deployment:
    needs: testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: .
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install curl
        run: sudo apt-get install -y curl
      
      - name: Build Docker image
        run: |
          docker build -t mlops-model:latest .
      
      - name: Deploy and test container
        run: |
          # Run the container
          docker run -d --name mlops-container -p 5001:5001 mlops-model:latest
          
          # Wait for container to be ready
          echo "Waiting for container to start..."
          sleep 10
          
          # Check container status
          docker ps
          docker logs mlops-container
          
          # Test with retry logic
          max_retries=5
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]
          do
            if curl -f http://localhost:5001/health; then
              echo "Health check passed!"
              break
            else
              echo "Attempt $((retry_count+1)) failed, retrying in 5 seconds..."
              sleep 5
              retry_count=$((retry_count+1))
            fi
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "Container health check failed after $max_retries attempts"
            exit 1
          fi
      
      - name: Test prediction endpoint
        run: |
          curl -X POST http://localhost:5001/predict \
            -H "Content-Type: application/json" \
            -d '{"features": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}'
      
      - name: Tag release
        if: success()
        run: |
          VERSION=$(date +%Y%m%d_%H%M%S)
          docker tag mlops-model:latest mlops-model:$VERSION
          echo "Tagged release version: $VERSION" 