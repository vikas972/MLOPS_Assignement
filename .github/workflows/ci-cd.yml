name: ML Model CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, release/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black==23.3.0 pylint==2.17.4
      
      - name: Format code with black
        run: |
          black src/
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add src/
          git commit -m "[auto] Format code with black" || echo "No changes to commit"
          git push || echo "No changes to push"
      
      - name: Run pylint
        run: |
          pylint src/ --fail-under=7 || echo "Pylint score below threshold"

  preprocessing:
    needs: linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Generate and preprocess dataset
        run: |
          mkdir -p data
          python src/data_generator.py
      
      - name: Upload dataset artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: data/dataset.csv
          retention-days: 1

  training:
    needs: preprocessing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download processed data
        uses: actions/download-artifact@v4
        with:
          name: processed-data
          path: data
      
      - name: Setup MLflow
        run: |
          mkdir -p mlruns
          mlflow server --host 0.0.0.0 --port 5000 &
          sleep 5
      
      - name: Train model
        run: |
          export MLFLOW_TRACKING_URI=http://localhost:5000
          python src/train_mlflow.py
      
      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: |
            models/
            mlruns/
          retention-days: 1

  testing:
    needs: training
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov
      
      - name: Download model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: .
      
      - name: Setup test environment
        run: |
          mkdir -p data
          mkdir -p models
          mkdir -p mlruns
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=src/ --cov-report=term-missing
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .coverage
            coverage.xml
          retention-days: 1

  staging-deployment:
    needs: testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Download model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: .
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: mlops-model:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to staging
        run: |
          docker run -d --name mlops-staging -p 5001:5001 mlops-model:staging
          sleep 10
          
          # Health check
          curl http://localhost:5001/health
          
          # Test prediction
          curl -X POST http://localhost:5001/predict \
            -H "Content-Type: application/json" \
            -d '{"features": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}'

  production-deployment:
    needs: [testing, staging-deployment]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Download model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: .
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            mlops-model:latest
            mlops-model:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to production
        run: |
          # In a real scenario, you would deploy to your production environment here
          # For demonstration, we'll run it locally
          docker run -d --name mlops-prod -p 5002:5001 mlops-model:latest
          sleep 10
          
          # Health check
          curl http://localhost:5002/health
          
          # Test prediction
          curl -X POST http://localhost:5002/predict \
            -H "Content-Type: application/json" \
            -d '{"features": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}'
      
      - name: Create Release
        if: github.event_name != 'pull_request'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Model Release v${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Model metrics available in MLflow
          draft: false
          prerelease: false

  